module control_unit(input clk,
input [6:0] opcode,
input [2:0] funcn,
output reg[3:0] operation,
output reg
invalid=0);
always @(posedge clk)begin
case({funcn,opcode})
10’b000_0000001:begin
operation = 4’h0; //addition
invalid =0;
end
10’b001_0000001:begin
operation = 4’h1; //subtraction
invalid=0;
end
10’b000_0000011:begin
operation = 4’h2; //shift left
invalid=0;
end
10’b001_0000011:begin
operation = 4’h6; //shifrightlogic
invalid=0;
end
10’b010_0000011:begin
operation = 4’h7; //shiftrightarithmatic
invalid=0;
end
10’b000_0000111:begin
operation = 4’h3; //signedlessthan
invalid=0;
end
10’b001_0000111:begin
operation = 4’h4; //unsignedlessthan
invalid=0;
end
10’b000_0001111:begin
operation = 4’h5; //xor
invalid=0;
end
10’b001_0001111:begin
operation = 4’h8; //or
invalid=0;
end
10’b010_0001111:begin
operation = 4’h9; //and
invalid=0;
end
default:begin
invalid=1;
operation = 4’h0;
end
endcase
end
endmodule